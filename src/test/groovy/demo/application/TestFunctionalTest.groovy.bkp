package demo.application


import spock.lang.*
import geb.spock.*
import groovy.json.JsonSlurper

import org.springframework.beans.factory.annotation.Value;
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.context.ApplicationContext
import org.springframework.boot.test.context.SpringBootTest
import org.springframework.boot.test.web.server.LocalServerPort;


import org.apache.hc.client5.http.classic.methods.HttpPost;
import org.apache.hc.client5.http.classic.methods.HttpGet;
import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;
import org.apache.hc.client5.http.impl.classic.CloseableHttpResponse;
import org.apache.hc.client5.http.impl.classic.HttpClients;
import org.apache.hc.core5.http.ParseException;
import org.apache.hc.core5.http.io.entity.EntityUtils;
import org.apache.hc.core5.http.io.entity.StringEntity;
import org.apache.hc.core5.http.ContentType;
import org.apache.hc.core5.http.HttpHeaders

import org.apache.hc.client5.http.protocol.HttpClientContext
import org.apache.hc.client5.http.impl.classic.HttpClientBuilder
import org.springframework.http.HttpEntity

import java.nio.charset.StandardCharsets
import org.springframework.boot.test.web.client.TestRestTemplate;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
class TestFunctionalTest extends Specification {

    @Autowired
    ApplicationContext applicationContext
    @Autowired
    private TestRestTemplate restTemplate;

    @Shared String controller = 'test'
    @Shared String protocol = "http://"

    @Value("\${server.address}")
    String serverAddress;

    @LocalServerPort private int port
    @Shared String exchangeIntro
    @Shared String appVersion
    @Shared String apiVersion = '1'



    // being forced to use testresttemplate
    void "[testuser] GET api call (with good data)"() {
        setup:"api is called"
        println(" ")
        println("[testuser] GET api call (with good data)")
        String action = 'show'


        String url = "${protocol}${this.serverAddress}:${this.port}/${this.controller}/${action}" as String

        def info = null;
        //def statusCode = null;
        HttpGet httpGet = new HttpGet(url);
        httpGet.setHeader(HttpHeaders.CONTENT_TYPE, "application/json");
        HttpClientContext context = new HttpClientContext();
        try (CloseableHttpClient httpclient = HttpClientBuilder.create().build()){
            //MockServerTestRestTemplate mockServer = new MockServerTestRestTemplate(restTemplate.getRestTemplate(), httpClient);
            //info = mockServer.getForObject("http://localhost:" + port + "/api/resource", String.class);

            try (CloseableHttpResponse response = httpclient.execute(httpGet,context)) {
                info = new JsonSlurper().parseText(EntityUtils.toString(response.getEntity()))
                //statusCode = response.getCode()
            }


        } catch (IOException | ParseException e) {
            e.printStackTrace();
        }

        println(info)
        //println(statusCode)


        when:"info is not null"
        assert info!=[:]
        then:"get user"
        assert statusCode == 200
        assert infoList == infoList.intersect(returnsList)
        // todo : also check that ROLE_ADMIN response vars are not in keyset
    }


    private String getVersion() throws IOException {
        ClassLoader classLoader = getClass().getClassLoader();
        URL incoming = classLoader.getResource("META-INF/build-info.properties")

        String version
        if (incoming != null) {
            Properties properties = new Properties();
            properties.load(incoming.openStream());
            version = properties.getProperty('build.version')
        }
        return version
    }

}