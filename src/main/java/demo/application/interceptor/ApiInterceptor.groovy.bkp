/*
 * Copyright 2013-2022 Owen Rubel
 * API Chaining(R) 2022 Owen Rubel
 *
 * Licensed under the AGPL v2 License;
 * you may not use this file except in compliance with the License.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @author Owen Rubel (orubel@gmail.com)
 *
 */

/*
* mapping needs to include 4 'callTypes' for load balancing:
* v : regular api call
* b : batching call
* c : chain call
* r : resource call
*
* This allows us the ability to move different call to different servers (should we want/need)
* so they do not affect 'regular calls' (ie 'v' callType)
 */
package io.beapi.api.interceptor

import io.beapi.api.service.ApiCacheService
import io.beapi.api.service.BatchExchangeService
import io.beapi.api.service.ChainExchangeService
import io.beapi.api.service.ErrorService
import io.beapi.api.service.ExchangeService
import io.beapi.api.service.StatsService
import java.lang.reflect.Field
import io.beapi.api.service.TraceExchangeService
//import io.beapi.api.service.HookExchangeService
import io.beapi.api.service.PrincipleService
import io.beapi.api.service.TraceService
import io.beapi.api.utils.ErrorCodes
import io.beapi.api.utils.UriObject
import org.slf4j.LoggerFactory;
import org.springframework.web.servlet.support.RequestContextUtils;

import io.beapi.api.properties.ApiProperties

import javax.crypto.KeyGenerator
import jakarta.servlet.http.HttpServletRequest
import jakarta.servlet.http.HttpServletResponse

import org.springframework.web.servlet.HandlerInterceptor
import org.springframework.web.servlet.ModelAndView
import org.springframework.boot.context.properties.EnableConfigurationProperties
import org.springframework.boot.autoconfigure.condition.ConditionalOnBean
import jakarta.servlet.DispatcherType
import javax.json.*
import org.springframework.security.web.header.*
//import groovyx.gpars.*
import jakarta.servlet.RequestDispatcher
import java.nio.charset.StandardCharsets
import org.apache.commons.io.IOUtils
import org.springframework.web.servlet.resource.ResourceHttpRequestHandler;
import javax.crypto.KeyGenerator;
import org.slf4j.LoggerFactory;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.beans.factory.annotation.Autowired

import org.springframework.scheduling.annotation.Async;
/**
 *
 * HandlerInterceptor for all API Calls. Routes call to appropriate ExchangeService methods for handling based on calltype.
 *
 * NOTE: calltype is checked in RequestInitializationFilter for compliance prior to parsing into UriObject
 *
 * @author Owen Rubel
 *
 */


@EnableConfigurationProperties([ApiProperties.class])
//@ConditionalOnBean(name = ["principle"])
class ApiInterceptor implements HandlerInterceptor{

	private static final org.slf4j.Logger logger = LoggerFactory.getLogger(ApiInterceptor.class);
	String markerText = "DEVNOTES";
	Marker devnotes = MarkerFactory.getMarker(markerText);

	// TODO : inject stats service into interceptor and then into here


	public ApiInterceptor() {

	}

	@Override
	@Async("otherExecutor")
	public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView mv) throws Exception {
		//logger.info("postHandle(HttpServletRequest, HttpServletResponse, Object, ModelAndView) : {}")
		//println("### ApiInterceptor / posthandle")

		ArrayList body = []
		if(request.getAttribute('responseBody')){
			body = request.getAttribute('responseBody')
		}

		PrintWriter writer = response.getWriter();
		writer.write(output);
		writer.close()

		response.writer.flush()
	}

}